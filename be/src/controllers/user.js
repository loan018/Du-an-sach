import User from "../models/user.js";
import bcrypt from "bcrypt";
import Notification from "../models/bell.js";

// L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng
export const getAllUsers = async (req, res) => {
  try {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const keyword = req.query.keyword || "";
    const role = req.query.role;
    const isActive = req.query.isActive;

    const query = {};

    if (role) query.role = role;
    if (isActive === "true") query.isActive = true;
    if (isActive === "false") query.isActive = false;
    if (keyword) {
      query.$or = [
        { name: { $regex: keyword, $options: "i" } },
        { email: { $regex: keyword, $options: "i" } }
      ];
    }

    const totalItems = await User.countDocuments(query);
    const users = await User.find(query)
      .skip((page - 1) * limit)
      .limit(limit)
      .sort({ createdAt: -1 })
      .select("-password");

    res.json({
      success: true,
      users,
      pagination: {
        totalItems,
        totalPages: Math.ceil(totalItems / limit),
        currentPage: page,
      },
    });
  } catch (err) {
    console.error("L·ªói khi ph√¢n trang ng∆∞·ªùi d√πng:", err);
    res.status(500).json({ success: false, message: "L·ªói m√°y ch·ªß" });
  }
};

// L·∫•y th√¥ng tin t√†i kho·∫£n ch√≠nh m√¨nh
export const getUserById = async (req, res) => {
  try {
    const user = await User.findById(req.user.id).select("-password");
    console.log(user);
    
    if (!user) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    }
    res.status(200).json({
      success: true,
      message: "L·∫•y t√†i kho·∫£n th√†nh c√¥ng",
      user,
    });
  } catch (err) {
    res.status(500).json({ success: false, message: "L·ªói m√°y ch·ªß: " + err.message });
  }
};

// ‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n
export const updateMe = async (req, res) => {
  try {
    const { name, email, phone,avatar } = req.body;
    const userId = req.user.id;

    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    }

    // N·∫øu ng∆∞·ªùi d√πng ƒë·ªïi email th√¨ ki·ªÉm tra xem email ƒë√£ t·ªìn t·∫°i ch∆∞a
    if (email && email !== user.email) {
      const emailExists = await User.findOne({ email });
      if (emailExists) {
        return res.status(400).json({ success: false, message: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng" });
      }
      user.email = email;
    }

    if (name) user.name = name;
    if (phone) user.phone = phone;

    await user.save();

    // ‚úÖ G·ª≠i th√¥ng b√°o
    await Notification.create({
      message: "B·∫°n ƒë√£ c·∫≠p nh·∫≠t h·ªì s∆° th√†nh c√¥ng",
      type: "user",
      userId: user._id,
      link: "/user",
    });

    res.json({
      success: true,
      message: "C·∫≠p nh·∫≠t th√†nh c√¥ng",
      user: {
        _id: user._id,
        name: user.name,
        email: user.email,
        phone: user.phone,
        avatar: user.avatar,
        role: user.role,
        isActive: user.isActive,
      },
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "C·∫≠p nh·∫≠t th·∫•t b·∫°i: " + error.message,
    });
  }
};

export const updateAvatar = async (req, res) => {
  try {
    const {avatar } = req.body;
    const userId = req.user.id;

    const user = await User.findById(userId);
    console.log(avatar);
    
    if (avatar) user.avatar = avatar;

    await user.save();
  } catch (error) {
    console.log(error);
  }
};
// üîê ƒê·ªïi m·∫≠t kh·∫©u
export const changePassword = async (req, res) => {
  try {
    const userId = req.user.id;
    const { currentPassword, newPassword } = req.body;

    if (!currentPassword || !newPassword) {
      return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin" });
    }

    const user = await User.findById(userId);
    const isMatch = await bcrypt.compare(currentPassword, user.password);

    if (!isMatch) {
      return res.status(400).json({ message: "M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng" });
    }

    user.password = await bcrypt.hash(newPassword, 10);
    await user.save();

    res.status(200).json({ message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng" });
  } catch (err) {
    res.status(500).json({ message: "L·ªói server: " + err.message });
  }
};

// üõ† Admin c·∫≠p nh·∫≠t vai tr√≤
export const updateUserRole = async (req, res) => {
  try {
    const { role } = req.body;
    const updatedUser = await User.findByIdAndUpdate(
      req.params.id,
      { role },
      { new: true }
    ).select("-password");

    if (!updatedUser) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    }

    res.json({ success: true, message: "C·∫≠p nh·∫≠t vai tr√≤ th√†nh c√¥ng", user: updatedUser });
  } catch (err) {
    res.status(500).json({ success: false, message: "C·∫≠p nh·∫≠t vai tr√≤ th·∫•t b·∫°i: " + err.message });
  }
};

// üö´ ·∫®n ng∆∞·ªùi d√πng
export const hideUser = async (req, res) => {
  try {
    const user = await User.findById(req.params.id);

    if (!user) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    }

    if (!user.isActive) {
      return res.status(400).json({ success: false, message: "Ng∆∞·ªùi d√πng ƒë√£ b·ªã ·∫©n tr∆∞·ªõc ƒë√≥" });
    }

    user.isActive = false;
    user.name = "Ng∆∞·ªùi d√πng ƒë√£ ·∫©n";
    await user.save();

    res.json({ success: true, message: "·∫®n ng∆∞·ªùi d√πng th√†nh c√¥ng", user });
  } catch (err) {
    res.status(500).json({ success: false, message: "·∫®n ng∆∞·ªùi d√πng th·∫•t b·∫°i: " + err.message });
  }
};
