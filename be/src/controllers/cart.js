import Cart from "../models/cart.js";
import Book from "../models/books.js";

//L·∫•y gi·ªè h√†ng c·ªßa ng∆∞·ªùi d√πng
export const getCart = async (req, res) => {
  try {
    const cart = await Cart.findOne({ user: req.user.id }).populate("items.book");
    res.json({ success: true,message: "L·∫•y gi·ªè h√†ng th√†nh c√¥ng", data: cart || { user: req.user.id, items: [] } });
  } catch (err) {
    res.status(500).json({ success: false, message: "L·∫•y gi·ªè h√†ng th·∫•t b·∫°i", error: err.message });
  }
};
// Th√™m s√°ch v√†o gi·ªè
export const addToCart = async (req, res) => {
  try {
    const { bookId, quantity } = req.body;

    if (quantity < 1) {
      return res.status(400).json({ success: false, message: "S·ªë l∆∞·ª£ng ph·∫£i l·ªõn h∆°n 0" });
    }

    const book = await Book.findById(bookId);
    if (!book || !book.isActive) {
      return res.status(404).json({ success: false, message: "S√°ch kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ ng·ª´ng b√°n" });
    }

    let cart = await Cart.findOne({ user: req.user.id });
    if (!cart) {
      cart = await Cart.create({ user: req.user.id, items: [] });
    }

    const existingItem = cart.items.find((item) => item.book.toString() === bookId);
    const totalQuantity = existingItem ? existingItem.quantity + quantity : quantity;

    if (totalQuantity > book.quantity) {
      return res.status(400).json({
        success: false,
        message: `Ch·ªâ c√≤n ${book.quantity} cu·ªën trong kho`,
      });
    }

    if (existingItem) {
      existingItem.quantity += quantity;
    } else {
      cart.items.push({ book: bookId, quantity });
    }

    await cart.save();
    const updated = await Cart.findById(cart.id).populate("items.book");

    res.json({ success: true, message: "ƒê√£ th√™m v√†o gi·ªè", data: updated });
  } catch (err) {
    res.status(500).json({
      success: false,
      message: "Th√™m v√†o gi·ªè h√†ng th·∫•t b·∫°i",
      error: err.message,
    });
  }
};


//C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s√°ch
export const updateCartItem = async (req, res) => {
  try {
    const { bookId, quantity } = req.body;

    if (quantity < 1) {
      return res.status(400).json({ success: false, message: "S·ªë l∆∞·ª£ng ph·∫£i >= 1" });
    }

    const cart = await Cart.findOne({ user: req.user.id });
    if (!cart) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng" });
    }

    const item = cart.items.find((item) => item.book.toString() === bookId);
    if (!item) {
      return res.status(404).json({ success: false, message: "S·∫£n ph·∫©m kh√¥ng c√≥ trong gi·ªè h√†ng" });
    }

    item.quantity = quantity;
    await cart.save();
    const updated = await Cart.findById(cart.id).populate("items.book");

    res.json({ success: true, message: "C·∫≠p nh·∫≠t th√†nh c√¥ng", data: updated });
  } catch (err) {
    res.status(500).json({ success: false, message: "C·∫≠p nh·∫≠t gi·ªè h√†ng th·∫•t b·∫°i", error: err.message });
  }
};

// X√≥a 1 s·∫£n ph·∫©m kh·ªèi gi·ªè
export const removeCartItem = async (req, res) => {
  try {
    const cart = await Cart.findOne({ user: req.user.id });
    if (!cart) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng" });
    }

    const beforeLength = cart.items.length;

    cart.items = cart.items.filter((item) => {
      const bookId = item.book.id ? item.book.id.toString() : item.book.toString();
      return bookId !== req.params.bookId;
    });

    if (cart.items.length === beforeLength) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y s√°ch trong gi·ªè h√†ng" });
    }

    await cart.save();

    const updated = await Cart.findById(cart.id).populate("items.book");
    res.json({ success: true, message: "Xo√° s√°ch th√†nh c√¥ng", data: updated });
  } catch (err) {
    res.status(500).json({ success: false, message: "Xo√° s√°ch th·∫•t b·∫°i", error: err.message });
  }
};


// üßπ X√≥a to√†n b·ªô gi·ªè h√†ng
export const clearCart = async (req, res) => {
  try {
    const cart = await Cart.findOne({ user: req.user.id });

    if (!cart || cart.items.length === 0) {
      return res.json({
        success: true,
        message: "Kh√¥ng c√≤n s√°ch n√†o trong gi·ªè h√†ng"
      });
    }

    cart.items = [];
    await cart.save();

    res.json({
      success: true,
      message: "ƒê√£ xo√° to√†n b·ªô gi·ªè h√†ng"
    });
  } catch (err) {
    res.status(500).json({
      success: false,
      message: "Xo√° to√†n b·ªô th·∫•t b·∫°i",
      error: err.message
    });
  }
};


